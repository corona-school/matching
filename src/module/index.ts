import { Tutor, Tutee, Match, InputFiles, OutputFile } from "./types";
import { createTmpFile, removeFiles } from "./utils/files";

import matchingAlgo from "./algo/run";
import { createInputFiles } from "./algo/inputCreation";
import { parseOutputFile } from "./algo/outputParsing";

import winston from "winston";

//configure winston logger
winston.configure({
    transports: [
      new winston.transports.Console()
    ],
    level: process.env.NODE_ENV === "dev" ? "debug" : "info"
});


/**
 * The same as `performAlgorithmPure`, just with another interface that will also enforce the new wording of "Tutors" and "Tutees"!
 * @param inputFiles An object describing the paths to the input files
 * @param outputFile A path to a file to which the output should be written. Make sure that all intermediate directories exists, they will not be created by that function!
 */
function performAlgorithm(inputFiles: InputFiles, outputFile: OutputFile) {
    matchingAlgo(inputFiles.tutees, inputFiles.tutors.upperGradeBound, inputFiles.tutors.lowerGradeBound, inputFiles.dissolvedMatches, outputFile);
}

/**
 * That function can be used to get matches in the most TS-like way. Give it some tutee, tutors and dissolved matches objects, and it will return some Match objects of the matches generated by Corona School's matching algorithm.
 * @param tutees 
 * @param tutors 
 * @param dissolvedMatches 
 */
function match(tutees: Tutee[], tutors: Tutor[] , dissolvedMatches: Match[]): Match[] {
    //if tutors or tutees are empty, we can immediately return an empty array, because there is nothing to match
    if (tutees.length === 0 || tutors.length === 0) {
        return [];
    }

    //write algorithm's input files to a temporary location
    const inputFiles = createInputFiles(tutees, tutors, dissolvedMatches);

    //get a temporary output location 
    const outputFile: OutputFile = createTmpFile().name;


    //log for debugging purposes
    winston.debug(`
        inputFiles: ${JSON.stringify(inputFiles)},
        outputFile: ${outputFile}
    `)

    //perform the algorithm
    performAlgorithm(inputFiles, outputFile);

    //parse the output to an array of matches
    const matches = parseOutputFile(outputFile);

    //remove the temporary files
    removeFiles([inputFiles.tutees, inputFiles.tutors.lowerGradeBound, inputFiles.tutors.upperGradeBound, outputFile]);

    //return the matches
    return matches;
}



export {
    performAlgorithm,
    matchingAlgo,
    match
}